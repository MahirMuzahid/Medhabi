@inject Blazored.LocalStorage.ILocalStorageService oLocalStore
@inject NavigationManager NavigationManager
@inject ServerConnection connect
@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable
@page "/dashboard"
@using login.Data
@using System.Timers

<div class="dashboard-main-wrapper">
    <!-- ============================================================== -->
    <!-- navbar -->
    <!-- ============================================================== -->
    <div class="dashboard-header">
        <nav class="navbar navbar-expand-lg bg-white fixed-top">
            <a class="navbar-brand" href="index.html" style="color:blueviolet">Medhabi Dashboard</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
        </nav>
    </div>
    <!-- ============================================================== -->
    <!-- end navbar -->
    <!-- ============================================================== -->
    <!-- ============================================================== -->
    <!-- left sidebar -->
    <!-- ============================================================== -->
    <div class="nav-left-sidebar sidebar-dark">
        <div class="menu-list">
            <nav class="navbar navbar-expand-lg navbar-light">
                <a class="d-xl-none d-lg-none" href="#">Dashboard</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav flex-column">
                        <li class="nav-divider">
                            Menu
                            <a class="nav-link active" href="#" aria-expanded="false" data-target="#submenu-2" aria-controls="submenu-2">Dashboard</a>

                            <a class="nav-link" href="#" @onclick="LogOut" aria-expanded="false" data-target="#submenu-2" aria-controls="submenu-2">Log Out</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- ============================================================== -->
    <!-- end left sidebar -->
    <!-- ============================================================== -->
    <!-- ============================================================== -->
    <!-- wrapper  -->
    <!-- ============================================================== -->
    @if (@student.name == null)
    {
        <div class="dashboard-wrapper">

            <div class="page-header lds-dual-ring">
                <h2 class="pageheader-title">Loading... </h2>
            </div>
        </div>
    }
    else
    {
        <div class="dashboard-wrapper">

            <div class="dashboard-ecommerce">

                <div class="container-fluid dashboard-content ">
                    <!-- ============================================================== -->
                    <!-- pageheader  -->
                    <!-- ============================================================== -->
                    <div >
                        <div id="myModal" class="@modelController">

                            <!-- Modal content -->
                            <div class="modal-content " style="border-radius: 25px; font-size: 15px">
                                <span class="close">&times;</span>
                                <p style="align-self:center; font-size: 18px"><b>@connectedStudent.name</b><br />Rank: @connectedStudent.rank<br />Point: @connectedStudent.point<br />Answered Quesyion: @connectedStudent.total_question_answered</p><br />
                                <a style="color: white" class="myButton1">Accept</a><br />
                                <a style="color: white" @onclick="close" class="myButton2">Reject</a>
                                <br /><a style="color: crimson; text-align: center"> If you reject you, 10 point will be didacted from you</a>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="page-header">
                                <h2 class="pageheader-title">@student.name </h2> <button class="login101-form-btn" @onclick="Play">@play </button>
                                <div class="page-breadcrumb">
                                    <nav aria-label="breadcrumb">
                                        <ol class="breadcrumb">
                                            <li class="breadcrumb-item active" aria-current="page">Student ID: @student.studentID</li>
                                            <li class="breadcrumb-item active" aria-current="page">Phonenumber: @student.phonenumber</li>
                                        </ol>
                                    </nav>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- ============================================================== -->
                    <!-- end pageheader  -->
                    <!-- ============================================================== -->
                    <div class="ecommerce-widget">

                        <div class="row">
                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="text-muted">Total Question Answered</h5>
                                        <div class="metric-value d-inline-block">
                                            <h1 class="mb-1">@student.total_question_answered</h1>
                                        </div>
                                        <div class="metric-label d-inline-block float-right text-success font-weight-bold">
                                            <span><i class=""></i></span><h5 style="color:  springgreen">Accuracy: @accuracy%</h5><span></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <div class="card-body">
                                        <!-------------------------------Have to changethis on api call------------------------------->
                                        <h5 class="text-muted">Position</h5>
                                        <div class="metric-value d-inline-block">
                                            <h1 class="mb-1">@student.position</h1>
                                        </div>
                                        <div class="metric-label d-inline-block float-right text-success font-weight-bold">
                                            <span><i class=""></i></span><span><h5 style="color:  springgreen">Total: @totalStudent </h5></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="text-muted">Rank</h5>
                                        <div class="metric-value d-inline-block">
                                            <h1 class="mb-1">@student.rank</h1>
                                        </div>
                                        <div class="metric-label d-inline-block float-right text-primary font-weight-bold">
                                            <span><h5 style="color:  springgreen">Point: @student.point</h5></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="text-muted">Account</h5>
                                        <div class="metric-value d-inline-block">
                                            <h1 class="mb-1">Student</h1>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <!-- ============================================================== -->
                            <!-- ============================================================== -->
                            <!-- Top Students  -->
                            <!-- ============================================================== -->
                            <div class="col-xl-9 col-lg-12 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <h5 class="card-header">Top Students</h5>
                                    <div class="card-body p-0">
                                        <div class="table-responsive">
                                            <table class="table">
                                                <thead class="bg-light">
                                                    <tr class="border-0">
                                                        <th class="border-0">Position</th>

                                                        <th class="border-0">ID</th>
                                                        <th class="border-0">Name</th>
                                                        <th class="border-0">Total Answered</th>
                                                        <th class="border-0">Right Answer</th>
                                                        <th class="border-0">Accuracy</th>
                                                        <th class="border-0">Point</th>
                                                        <th class="border-0">Rank</th>
                                                    </tr>
                                                </thead>
                                                <tbody>

                                                    @foreach (var studentlist in TopStudentList)
                                                    {
                                                        if (studentlist.position <= 10)
                                                        {
                                                            <tr style="background: @studentlist.color; color: @studentlist.txtColor">
                                                                <td>@studentlist.position</td>
                                                                <td>@studentlist.studentID</td>
                                                                <td>@studentlist.name</td>
                                                                <td>@studentlist.total_question_answered</td>
                                                                <td>@studentlist.total_right_answer</td>
                                                                <td>@studentlist.accureacy%</td>
                                                                <td>@studentlist.point</td>
                                                                <td>@studentlist.rank</td>
                                                            </tr>
                                                        }
                                                        else
                                                        {
                                                            break;
                                                        }

                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- ============================================================== -->
                            <!-- end recent orders  -->
                            <!-- customer acquistion  -->
                            <!-- ============================================================== -->
                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <h5 class="card-header">Class & Group</h5>
                                    <div class="card-body">

                                        <div class="text-center">
                                            <span class="legend-item mr-2">
                                                <span class="fa-xs text-primary mr-1 legend-tile"><i class="fa fa-fw fa-square-full"></i></span>
                                                <span class="legend-text">HSC</span>
                                            </span>
                                            <span class="legend-item mr-2">

                                                <span class="fa-xs text-secondary mr-1 legend-tile"><i class="fa fa-fw fa-square-full"></i></span>
                                                <span class="legend-text">Science</span>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- ============================================================== -->
                            <!-- Top Teacher  -->
                            <!-- ============================================================== -->
                            <!-- ============================================================== -->
                            <div class="col-xl-9 col-lg-12 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <h5 class="card-header">Top Teacher</h5>
                                    <div class="card-body p-0">
                                        <div class="table-responsive">
                                            <table class="table">
                                                <thead class="bg-light">
                                                    <tr class="border-0">
                                                        <th class="border-0">Position</th>
                                                        <th class="border-0">ID</th>
                                                        <th class="border-0">Name</th>
                                                        <th class="border-0">Posted Question</th>
                                                        <th class="border-0">Rank</th>
                                                    </tr>
                                                </thead>
                                                <tbody>

                                                    @foreach (var teachertlist in TopTeacherList)
                                                    {
                                                        <tr style="background: @teachertlist.color; color: @teachertlist.txtColor">
                                                            <td>@teachertlist.position</td>
                                                            <td>@teachertlist.teacherID</td>
                                                            <td>@teachertlist.name</td>
                                                            <td>@teachertlist.posted_question</td>
                                                            <td>@teachertlist.rank</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- ============================================================== -->
                            <!-- end recent orders  -->
                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 col-12">
                                <!-- ============================================================== -->
                                <!-- Number of Question  -->
                                <!-- ============================================================== -->
                                <div class="card">
                                    <h5 class="card-header">Top Performing Campaigns</h5>
                                    <div class="card-body p-0">
                                        <div class="table-responsive">
                                            <table class="table no-wrap p-table">
                                                <thead class="bg-light">
                                                    <tr class="border-0">
                                                        <th class="border-0">Campaign</th>
                                                        <th class="border-0">Visits</th>
                                                        <th class="border-0">Revenue</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr>
                                                        <td>Campaign#1</td>
                                                        <td>98,789 </td>
                                                        <td>$4563</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Campaign#2</td>
                                                        <td>2,789 </td>
                                                        <td>$325</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Campaign#3</td>
                                                        <td>1,459 </td>
                                                        <td>$225</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Campaign#4</td>
                                                        <td>5,035 </td>
                                                        <td>$856</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Campaign#5</td>
                                                        <td>10,000 </td>
                                                        <td>$1000</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Campaign#5</td>
                                                        <td>10,000 </td>
                                                        <td>$1000</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>

                                <!-- ============================================================== -->
                                <!-- ============================================================== -->
                            </div>

                            <!-- ============================================================== -->
                            <!-- product category  -->
                            <!-- ============================================================== -->
                            <!-- end sales traffice source  -->
                            <!-- ============================================================== -->
                            <!-- ============================================================== -->
                            <!-- sales traffic country source  -->
                            <!-- ============================================================== -->
                            <!-- ============================================================== -->
                            <!-- end sales traffice country source  -->
                            <!-- ============================================================== -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- ============================================================== -->
            <!-- footer -->
            <!-- ============================================================== -->
            <div class="footer">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12">
                            Copyright © 2018 Shikkhanobish. All rights reserved.
                        </div>
                        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12">
                            <div class="text-md-right footer-links d-none d-sm-block">
                                <a href="javascript: void(0);">About</a>
                                <a href="javascript: void(0);">Support</a>
                                <a href="javascript: void(0);">Contact Us</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- ============================================================== -->
            <!-- end footer -->
            <!-- ============================================================== -->
        </div>
    }

    <!-- ============================================================== -->
    <!-- end wrapper  -->
    <!-- ============================================================== -->
</div>

@code {

    Student student = new Student();
    public List<Teacher> TopTeacherList = new List<Teacher>();
    public List<Student> TopStudentList = new List<Student>();
    int accuracy = 0;
    int positionCounter = 0, totalStudent = 0;
    string color, play;
    int min = 0, sec = 0;
    protected override async Task OnInitializedAsync()
    {
        modelController = "modalClose";
        play = "Play";
        on = false;
        await Task.Run(() => AuthenticateUser());

    }

    public async Task AuthenticateUser()
    {

        student.mail = await oLocalStore.GetItemAsync<string>("mail");
        student.password = await oLocalStore.GetItemAsync<string>("password");

        if (student.mail == null || student.password == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await Task.Run(() => connect.SignIn(student.mail, student.password));
            await Task.Run(() => connect.GetTopStudent());
            await Task.Run(() => connect.GetTopTeacher());

            student = connect.student;
            TopStudentList = connect.TopStudentList;
            TopTeacherList = connect.TopTeacherList;
            if (student.total_question_answered == 0)
            {
                accuracy = 0;
            }
            else
            {
                float div = ((float)student.total_right_answer / (float)student.total_question_answered);
                accuracy = (int)(div * 100f);
            }

            PositionCounter();
            AccuracyCounter();
        }
    }

    public void LogOut()
    {
        oLocalStore.ClearAsync();
        NavigationManager.NavigateTo("/");
    }

    public void PositionCounter()
    {
        for (int i = 0; i < TopStudentList.Count; i++)
        {
            TopStudentList[i].position = i + 1;
            if (i == 10)
            {
                break;
            }
            else
            {
                if (i == 0)
                {
                    TopStudentList[i].color = "#65239A";
                    TopStudentList[i].txtColor = "white";
                }
                if (i == 1)
                {
                    TopStudentList[i].color = "#19BD50";
                    TopStudentList[i].txtColor = "white";
                }
                if (i == 2)
                {
                    TopStudentList[i].color = "#1C88E3";
                    TopStudentList[i].txtColor = "white";
                }
            }

        }
        for (int j = 0; j < TopTeacherList.Count; j++)
        {
            if (j == 10)
            {
                break;
            }
            else
            {
                TopTeacherList[j].position = j + 1;
                if (j == 0)
                {
                    TopTeacherList[j].color = "#65239A";
                    TopTeacherList[j].txtColor = "white";
                }
                if (j == 1)
                {
                    TopTeacherList[j].color = "#19BD50";
                    TopTeacherList[j].txtColor = "white";

                }
                if (j == 2)
                {
                    TopTeacherList[j].color = "#1C88E3";
                    TopTeacherList[j].txtColor = "white";
                }
            }

        }
        for (int k = 0; k < connect.allStudent.Count; k++)
        {
            if (connect.allStudent[k].name == student.name)
            {
                student.position = k + 1;
            }
        }
        totalStudent = connect.allStudent.Count;
    }
    public void AccuracyCounter()
    {
        for (int i = 0; i < TopStudentList.Count; i++)
        {
            if (TopStudentList[i].total_question_answered == 0)
            {
                TopStudentList[i].accureacy = 0;
            }
            else
                TopStudentList[i].accureacy = (int)(100f * ((float)TopStudentList[i].total_right_answer / (float)TopStudentList[i].total_question_answered));

        }
        //-------------------------------------------------------------------------------------
        //Match Timer--------------------------------------------------------------------------
        //-------------------------------------------------------------------------------------
    }
    Timer timer;
    public async Task Play()
    {
        on = !on;
        if (on == true)
        {
            play = "Searching... ";
            timer = new Timer();
            timer.Interval = 1000;
            timer.Elapsed += counter;
            timer.Start();
            await Task.Run(() => MatchmakingInfo());
        }
        else
        {
            timer.Stop();
            sec = 0;
            min = 0;
            play = "Play";
            await Task.Run(() => connect.DeleteIfFound(student.studentID));
            await _connection.StopAsync();
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }

    }
    public bool on;
    private void counter(object sender, ElapsedEventArgs e)
    {
        sec = sec + 1;
        play = "Searching... " + min + ":" + sec;
        if (sec == 59)
        {
            min = min + 1;
            sec = 0;
        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    //------------------------------------------------------------------------------
    //Match Making------------------------------------------------------------------
    //------------------------------------------------------------------------------

    MatchMaking matchmaking = new MatchMaking();
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
    }
    public MatchMaking connectedMatch { get; set; }
    public async Task MatchmakingInfo()
    {
        await Task.Run(() => ConnectToServer());
        await Task.Run(() => connect.GetMatchMaking());
        if (connect.matchmakingList.Count == 0)
        {
            await Task.Run(() => SetInMatchmaking());
        }
        else
        {
            for (int i = 0; i < connect.matchmakingList.Count; i++)
            {
                if (connect.matchmakingList[i].secondPlayerID == 0)
                {
                    await Task.Run(() => connect.DeleteIfFound(connect.matchmakingList[0].firstPlayerID));
                    connectedMatch = connect.ConnectedMatch;
                    connectedMatch.secondPlayerID = student.studentID;
                    await Task.Run(() => connect.ConnectWith2ndStudent(student.studentID));
                    break;
                }
                else if (i == (connect.matchmakingList.Count - 1))
                {
                    await Task.Run(() => SetInMatchmaking());
                    break;
                }
            }
        }

    }
    public async Task SetInMatchmaking()
    {
        Random r = new Random();
        int random;
        for (int j = 0; j < 5; j++)
        {
            random = r.Next(0, 300);
            if (j == 0)
            {
                matchmaking.firstQuestionID = random;
            }
            else if (j == 1)
            {
                matchmaking.secondQuestionID = random;
            }
            else if (j == 2)
            {
                matchmaking.thirdQuestionID = random;
            }
            else if (j == 3)
            {
                matchmaking.forthQuestionID = random;
            }
            else if (j == 4)
            {
                matchmaking.fifthQuestionID = random;
            }
        }
        matchmaking.firstPlayerID = student.studentID;
        matchmaking.matchID = Guid.NewGuid().ToString();
        await Task.Run(() => connect.SetMachMaking(matchmaking));
        QuestionMaker qm = new QuestionMaker();
        qm.firstqsID = matchmaking.firstQuestionID;
        qm.secondID = matchmaking.secondQuestionID;
        qm.thirdID = matchmaking.thirdQuestionID;
        qm.forthID = matchmaking.forthQuestionID;
        qm.fifthID = matchmaking.fifthQuestionID;
    }
    public List<Question> allqs { get; set; }
    public async Task GetQuestiob(QuestionMaker qm)
    {
        await Task.Run(() => connect.MakeQuestion(qm));
        allqs = connect.allqs;
    }

    //----------------------------------------------------------------------
    //Real Time Server Connection With 2nd Player---------------------------
    //----------------------------------------------------------------------

    string url = "https://medhabiapi.shikkhanobish.com/QuizHub";
    public int connectedStudentID { get; set; }
    HubConnection _connection = null;
    bool isConnected = false;
    string connectionStatus = "Closed";

    List<QuizInfo> quizinfo = new List<QuizInfo>();

    private async Task ConnectToServer()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();
        isConnected = true;
        connectionStatus = "Connected";

        _connection.Closed += async (s) =>
        {
            isConnected = false;
            connectionStatus = "Disconnected";
            await _connection.StartAsync();
            isConnected = true;

        };

        _connection.On<int>("Connected", async id =>
        {
            connectedStudentID = id;
            await Task.Run(() => showplayer(id));
        });


    }
    public Student connectedStudent = new Student();
    public async Task showplayer(int id)
    {
        if (connectedStudentID > 0)
        {
            await Task.Run(() => connect.getInfoFromId(connectedStudentID));
            connectedStudent = connect.secondstudent;
            modelController = "modalOpen";
        }
    }
    string modelController;
    public async Task close()
    {
        modelController = "modalClose";
        timer.Stop();
        sec = 0;
        min = 0;
        play = "Play";
        await Task.Run(() => connect.DeleteIfFound(student.studentID));
        await _connection.StopAsync();
        connectedStudentID = 0;
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}