
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore
@inject NavigationManager NavigationManager
@inject ServerConnection connect

@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable
@page "/dashboard"
@using login.Data
@using System.Timers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util




<div class="dashboard-main-wrapper">
    <!-- ============================================================== -->
    <!-- navbar -->
    <!-- ============================================================== -->
    <div class="dashboard-header">
        <nav class="navbar navbar-expand-lg bg-white fixed-top">
            <a class="navbar-brand" href="index.html" style="color:blueviolet">Medhabi Dashboard</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
        </nav>
    </div>
    <!-- ============================================================== -->
    <!-- end navbar -->
    <!-- ============================================================== -->
    <!-- ============================================================== -->
    <!-- left sidebar -->
    <!-- ============================================================== -->
    <div class="nav-left-sidebar sidebar-dark">
        <div class="menu-list">
            <nav class="navbar navbar-expand-lg navbar-light">
                <a class="d-xl-none d-lg-none" href="#">Dashboard</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav flex-column">
                        <li class="nav-divider">
                            Menu
                            <a class="nav-link active" href="#" aria-expanded="false" data-target="#submenu-2" aria-controls="submenu-2">Dashboard</a>

                            <a class="nav-link" href="#" @onclick="LogOut" aria-expanded="false" data-target="#submenu-2" aria-controls="submenu-2">Log Out</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- ============================================================== -->
    <!-- end left sidebar -->
    <!-- ============================================================== -->
    <!-- ============================================================== -->
    <!-- wrapper  -->
    <!-- ============================================================== -->
    @if ( @student.name == null )
    {
        <div class="dashboard-wrapper">

            <div class="page-header lds-dual-ring">
                <h2 class="pageheader-title">Loading... </h2>
            </div>
        </div>
    }
    else
    {
        <div class="dashboard-wrapper">

            <div class="dashboard-ecommerce">

                <div class="container-fluid dashboard-content ">
                    <!-- ============================================================== -->
                    <!-- pageheader  -->
                    <!-- ============================================================== -->
                    <div>
                        <div id="myModal" class="@modelController" style="text-align: center;">

                            <!-- Modal content -->
                            <div class="modal-content " style="border-radius: 25px; font-size: 15px; text-align: center;background:@acceptedColor ">
                                <div class="modelContent" style="text-align: center;padding: 20px; ">
                                    <p class="nameText" style="color: @textcolor"><b>@student.name</b><br />Rank: @student.rank<br />Point: @student.point<br />Answered: @student.total_question_answered</p><br />
                                    <p class="nameText" style="color: @textcolor"><b>@connectedStudent.name</b><br />Rank: @connectedStudent.rank<br />Point: @connectedStudent.point<br />Answered: @connectedStudent.total_question_answered</p><br />
                                </div>
                                <a style="color: @textcolor">@showTxt</a>
                                <a style="color: white; display: @display" @onclick="(async() => await sendSecondPlayer())" class="myButton1">Accept</a><br />
                                <div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="80" aria-valuemin="0" aria-valuemax="100" style="width:@value%">

                                </div>
                                <br /><a style="color: crimson; text-align: center;Display: @display"> [If you don't accept in 20 second, 10 points will be didacted from you(minimum point: 10)]</a>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">
                            <div class="page-header">
                                <h2 class="pageheader-title">@student.name </h2> <button class="login101-form-btn" @onclick="Play">@play </button>
                                <div class="page-breadcrumb">
                                    <nav aria-label="breadcrumb">
                                        <ol class="breadcrumb">
                                            <li class="breadcrumb-item active" aria-current="page">Student ID: @student.studentID</li>
                                            <li class="breadcrumb-item active" aria-current="page">Phonenumber: @student.phonenumber</li>
                                        </ol>
                                    </nav>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- ============================================================== -->
                    <!-- end pageheader  -->
                    <!-- ============================================================== -->
                    <div class="ecommerce-widget">

                        <div class="row">
                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="text-muted">Total Right Answer</h5>
                                        <div class="metric-value d-inline-block">
                                            <h1 class="mb-1">@student.total_right_answer</h1>
                                        </div>
                                        <div class="metric-label d-inline-block float-right text-success font-weight-bold">
                                            <span><i class=""></i></span><h5 style="color: #20b760">Answered Question: @student.total_question_answered</h5>
                                            <span><i class=""></i></span><h5 style="color: #20b760">Accuracy: @accuracy%</h5>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <div class="card-body">
                                        <!-------------------------------Have to changethis on api call------------------------------->
                                        <h5 class="text-muted">Position</h5>
                                        <div class="metric-value d-inline-block">
                                            <h1 class="mb-1">@student.position</h1>
                                        </div>
                                        <div class="metric-label d-inline-block float-right text-success font-weight-bold">
                                            <span><i class=""></i></span><span><h5 style="color:  #20b760">Total: @totalStudent </h5></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="text-muted">Rank</h5>
                                        <div class="metric-value d-inline-block">
                                            <h1 class="mb-1">@student.rank</h1>
                                        </div>
                                        <div class="metric-label d-inline-block float-right text-primary font-weight-bold">
                                            <span><h5 style="color:  #20b760">Point: @student.point</h5></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="text-muted">Account</h5>
                                        <div class="metric-value d-inline-block">
                                            <h1 class="mb-1">Student</h1>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <!-- ============================================================== -->
                            <!-- ============================================================== -->
                            <!-- Top Students  -->
                            <!-- ============================================================== -->
                            <div class="col-xl-9 col-lg-12 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <h5 class="card-header">Top Students</h5>
                                    <div class="card-body p-0">
                                        <div class="table-responsive">
                                            <table class="table">
                                                <thead class="bg-light">
                                                    <tr class="border-0">
                                                        <th class="border-0">Position</th>

                                                        <th class="border-0">ID</th>
                                                        <th class="border-0">Name</th>
                                                        <th class="border-0">Total Answered</th>
                                                        <th class="border-0">Right Answer</th>
                                                        <th class="border-0">Accuracy</th>
                                                        <th class="border-0">Point</th>
                                                        <th class="border-0">Rank</th>
                                                    </tr>
                                                </thead>
                                                <tbody>

                                                    @foreach ( var studentlist in TopStudentList )
                                                    {
                                                        if ( studentlist.position <= 10 )
                                                        {
                                                            <tr style="background: @studentlist.color; color: @studentlist.txtColor">
                                                                <td>@studentlist.position</td>
                                                                <td>@studentlist.studentID</td>
                                                                <td>@studentlist.name</td>
                                                                <td>@studentlist.total_question_answered</td>
                                                                <td>@studentlist.total_right_answer</td>
                                                                <td>@studentlist.accureacy%</td>
                                                                <td>@studentlist.point</td>
                                                                <td>@studentlist.rank</td>
                                                            </tr>
                                                        }
                                                        else
                                                        {
                                                            break;
                                                        }

                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- ============================================================== -->
                            <!-- end recent orders  -->
                            <!-- customer acquistion  -->
                            <!-- ============================================================== -->
                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <h5 class="card-header">Class & Group</h5>
                                    <div class="card-body">

                                        <div class="text-center">
                                            <span class="legend-item mr-2">
                                                <span class="fa-xs text-primary mr-1 legend-tile"><i class="fa fa-fw fa-square-full"></i></span>
                                                <span class="legend-text">HSC</span>
                                            </span>
                                            <span class="legend-item mr-2">

                                                <span class="fa-xs text-secondary mr-1 legend-tile"><i class="fa fa-fw fa-square-full"></i></span>
                                                <span class="legend-text">Science</span>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- ============================================================== -->
                            <!-- Top Teacher  -->
                            <!-- ============================================================== -->
                            <!-- ============================================================== -->
                            <div class="col-xl-9 col-lg-12 col-md-6 col-sm-12 col-12">
                                <div class="card">
                                    <h5 class="card-header">Top Teacher</h5>
                                    <div class="card-body p-0">
                                        <div class="table-responsive">
                                            <table class="table">
                                                <thead class="bg-light">
                                                    <tr class="border-0">
                                                        <th class="border-0">Position</th>
                                                        <th class="border-0">ID</th>
                                                        <th class="border-0">Name</th>
                                                        <th class="border-0">Posted Question</th>
                                                        <th class="border-0">Rank</th>
                                                    </tr>
                                                </thead>
                                                <tbody>

                                                    @foreach ( var teachertlist in TopTeacherList )
                                                    {
                                                        <tr style="background: @teachertlist.color; color: @teachertlist.txtColor">
                                                            <td>@teachertlist.position</td>
                                                            <td>@teachertlist.teacherID</td>
                                                            <td>@teachertlist.name</td>
                                                            <td>@teachertlist.posted_question</td>
                                                            <td>@teachertlist.rank</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- ============================================================== -->
                            <!-- end Top Teacher -->


                            <div class="col-xl-3 col-lg-6 col-md-6 col-sm-12 col-12">
                                <!-- ============================================================== -->
                                <!-- Number of Question  -->
                                <!-- ============================================================== -->
                                <div class="card">
                                    <h5 class="card-header">Top Performing Campaigns</h5>
                                    <div class="card-body p-0">
                                        <div class="table-responsive">
                                            <table class="table no-wrap p-table">
                                                <thead class="bg-light">
                                                    <tr class="border-0">
                                                        <th class="border-0">Campaign</th>
                                                        <th class="border-0">Visits</th>
                                                        <th class="border-0">Revenue</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr>
                                                        <td>Campaign#1</td>
                                                        <td>98,789 </td>
                                                        <td>$4563</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Campaign#2</td>
                                                        <td>2,789 </td>
                                                        <td>$325</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Campaign#3</td>
                                                        <td>1,459 </td>
                                                        <td>$225</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Campaign#4</td>
                                                        <td>5,035 </td>
                                                        <td>$856</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Campaign#5</td>
                                                        <td>10,000 </td>
                                                        <td>$1000</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Campaign#5</td>
                                                        <td>10,000 </td>
                                                        <td>$1000</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>

                                <!-- ============================================================== -->
                                <!-- ============================================================== -->
                            </div>
                            <!-- ============================================================== -->
                            <!-- Top Teacher  -->
                            <!-- ============================================================== -->
                            <!-- ============================================================== -->
                            <div class="col-xl-6 col-lg-12 col-md-6 col-sm-12 col-12 card" style="background: #ffffff; border-color:aquamarine;  border: 10px; border-radius: 10px">
                                <login.Pages.SubjectWiseAns/>

                            </div>
                            <!-- ============================================================== -->
                            <!-- end Top Teacher -->
                            <!-- ============================================================== -->
                            <!-- product category  -->
                            <!-- ============================================================== -->
                            <!-- end sales traffice source  -->
                            <!-- ============================================================== -->
                            <!-- ============================================================== -->
                            <!-- sales traffic country source  -->
                            <!-- ============================================================== -->
                            <!-- ============================================================== -->
                            <!-- end sales traffice country source  -->
                            <!-- ============================================================== -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- ============================================================== -->
            <!-- footer -->
            <!-- ============================================================== -->
            <div class="footer">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12">
                            Copyright © 2018 Shikkhanobish. All rights reserved.
                        </div>
                        <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12">
                            <div class="text-md-right footer-links d-none d-sm-block">
                                <a href="javascript: void(0);">About</a>
                                <a href="javascript: void(0);">Support</a>
                                <a href="javascript: void(0);">Contact Us</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- ============================================================== -->
            <!-- end footer -->
            <!-- ============================================================== -->
        </div>
    }

    <!-- ============================================================== -->
    <!-- end wrapper  -->
    <!-- ============================================================== -->
</div>

@code {

    Student student = new Student ();
    public List<Teacher> TopTeacherList = new List<Teacher> ();
    public List<Student> TopStudentList = new List<Student> ();
    int accuracy = 0, value;
    int positionCounter = 0, totalStudent = 0;
    string color, play;
    int min = 0, sec = 0;
    string modelController;
    Timer timer, send;
    public bool on, otherPlayerReject;
    MatchMaking matchmaking = new MatchMaking ();
    string url = "https://medhabiapi.shikkhanobish.com/QuizHub";
    public int connectedStudentID { get; set; }
    int senderID;
    HubConnection _connection = null;
    bool isConnected = false;
    string connectionStatus = "Closed";
    List<QuizInfo> quizinfo = new List<QuizInfo> ();
    string acceptedColor, textcolor, showTxt, display;
    public MatchMaking connectedMatch { get; set; }
    public bool selforNor = false;

    protected override async Task OnInitializedAsync ( )
    {
        modelController = "modalClose";
        play = "Play";
        on = false;
        await Task.Run ( ( ) => AuthenticateUser () );
        acceptedColor = "#ffffff";
        textcolor = "black";
        showTxt = "Click to accept chalange";
        display = "block";
        selforNor = false;
        value = 100;

    }

    //-------------------------------------------------------------------------------------
    //Before Connecting To Server----------------------------------------------------------
    //-------------------------------------------------------------------------------------

    public async Task AuthenticateUser ( )
    {

        student.mail = await oLocalStore.GetItemAsync<string> ( "mail" );
        student.password = await oLocalStore.GetItemAsync<string> ( "password" );

        if ( student.mail == null || student.password == null )
        {
            NavigationManager.NavigateTo ( "/" );
        }
        else
        {
            await Task.Run ( ( ) => connect.SignIn ( student.mail , student.password ) );
            await Task.Run ( ( ) => connect.GetTopStudent () );
            await Task.Run ( ( ) => connect.GetTopTeacher () );

            student = connect.student;
            TopStudentList = connect.TopStudentList;
            TopTeacherList = connect.TopTeacherList;
            if ( student.total_question_answered == 0 )
            {
                accuracy = 0;
            }
            else
            {
                float div = ( ( float ) student.total_right_answer / ( float ) student.total_question_answered );
                accuracy = ( int ) ( div * 100f );
            }

            PositionCounter ();
            AccuracyCounter ();
        }
    }
    public void LogOut ( )
    {
        oLocalStore.ClearAsync ();
        NavigationManager.NavigateTo ( "/" );
    }
    public void PositionCounter ( )
    {
        for ( int i = 0; i < TopStudentList.Count; i++ )
        {
            TopStudentList [ i ].position = i + 1;
            if ( i == 10 )
            {
                break;
            }
            else
            {
                if ( i == 0 )
                {
                    TopStudentList [ i ].color = "#65239A";
                    TopStudentList [ i ].txtColor = "white";
                }
                if ( i == 1 )
                {
                    TopStudentList [ i ].color = "#19BD50";
                    TopStudentList [ i ].txtColor = "white";
                }
                if ( i == 2 )
                {
                    TopStudentList [ i ].color = "#1C88E3";
                    TopStudentList [ i ].txtColor = "white";
                }
            }

        }
        for ( int j = 0; j < TopTeacherList.Count; j++ )
        {
            if ( j == 10 )
            {
                break;
            }
            else
            {
                TopTeacherList [ j ].position = j + 1;
                if ( j == 0 )
                {
                    TopTeacherList [ j ].color = "#65239A";
                    TopTeacherList [ j ].txtColor = "white";
                }
                if ( j == 1 )
                {
                    TopTeacherList [ j ].color = "#19BD50";
                    TopTeacherList [ j ].txtColor = "white";

                }
                if ( j == 2 )
                {
                    TopTeacherList [ j ].color = "#1C88E3";
                    TopTeacherList [ j ].txtColor = "white";
                }
            }

        }
        for ( int k = 0; k < connect.allStudent.Count; k++ )
        {
            if ( connect.allStudent [ k ].name == student.name )
            {
                student.position = k + 1;
            }
        }
        totalStudent = connect.allStudent.Count;
    }
    public void AccuracyCounter ( )
    {
        for ( int i = 0; i < TopStudentList.Count; i++ )
        {
            if ( TopStudentList [ i ].total_question_answered == 0 )
            {
                TopStudentList [ i ].accureacy = 0;
            }
            else
            {
                TopStudentList [ i ].accureacy = ( int ) ( 100f * ( ( float ) TopStudentList [ i ].total_right_answer / ( float ) TopStudentList [ i ].total_question_answered ) );
            }

        }

    }

    //-------------------------------------------------------------------------------------
    //Match Timer--------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------

    public async Task Play ( )
    {
        on = !on;
        if ( on == true )
        {
            play = "Searching... ";
            timer = new Timer ();
            timer.Interval = 1000;
            timer.Elapsed += counter;
            timer.Start ();
            await Task.Run ( ( ) => MatchmakingInfo () );
        }
        else
        {
            timer.Stop ();
            sec = 0;
            min = 0;
            timer.Enabled = false;
            timer.Close ();
            play = "Play";
            await Task.Run ( ( ) => connect.DeleteIfFound ( student.studentID ) );
            await _connection.StopAsync ();
            await InvokeAsync ( ( ) =>
            {
                StateHasChanged ();
            } );
        }

    }
    private void counter ( object sender , ElapsedEventArgs e )
    {
        sec = sec + 1;
        play = "Searching... " + min + ":" + sec;
        if ( sec == 59 )
        {
            min = min + 1;
            sec = 0;
        }
        InvokeAsync ( ( ) =>
        {
            StateHasChanged ();
        } );
    }

    //------------------------------------------------------------------------------
    //Match Making------------------------------------------------------------------
    //------------------------------------------------------------------------------

    public void Dispose ( )
    {
        if ( timer != null )
        {
            timer.Dispose ();
        }
    }

    public async Task MatchmakingInfo ( )
    {
        await Task.Run ( ( ) => ConnectToServer () );
        await Task.Run ( ( ) => connect.GetMatchMaking () );
        if ( connect.matchmakingList.Count == 0 )
        {
            await Task.Run ( ( ) => SetInMatchmaking () );
        }
        else
        {
            //If I found match--------------------------------------------------------------------------
            for ( int i = 0; i < connect.matchmakingList.Count; i++ )
            {
                if ( connect.matchmakingList [ i ].secondPlayerID == 0 )
                {
                    send = new Timer ();
                    send.Interval = 1000;
                    send.Elapsed += timecounter;
                    send.Start ();
                    showTxt = "Click to accept chalange";
                    acceptedColor = "#ffffff";
                    textcolor = "black";
                    selforNor = true;
                    modelController = "modalOpen";
                    matchmaking = connect.matchmakingList [ i ];
                    await Task.Run ( ( ) => connect.getInfoFromId ( connect.matchmakingList [ i ].firstPlayerID ) );
                    connectedStudent = connect.secondstudent;

                    await InvokeAsync ( ( ) =>
                    {
                        StateHasChanged ();
                    } );
                    break;
                }
                else if ( i == ( connect.matchmakingList.Count - 1 ) )
                {
                    await Task.Run ( ( ) => SetInMatchmaking () );
                    break;
                }
            }
        }

    }
    public async Task SetInMatchmaking ( )
    {
        List<string> qsCodeList = new List<string> ();
        Random r = new Random ();
        int random, j = 0;
        for ( int i = 0; j >= 0; i++ )
        {
            random = r.Next ( 0 , 1000 );
            await Task.Run ( ( ) => connect.ConfirmQs ( random ) );
            if ( connect.submitted == 1 )
            {
                j++;
                qsCodeList.Add (connect.QuestionCode);
            }

            if ( j == 1 )
            {
                matchmaking.firstQuestionID = random;

            }
            else if ( j == 2 )
            {
                matchmaking.secondQuestionID = random;
            }
            else if ( j == 3 )
            {
                matchmaking.thirdQuestionID = random;
            }
            else if ( j == 4 )
            {
                matchmaking.forthQuestionID = random;
            }
            else if ( j == 5 )
            {
                matchmaking.fifthQuestionID = random;
                break;
            }
        }
        matchmaking.firstPlayerID = student.studentID;
        matchmaking.matchID = Guid.NewGuid ().ToString ();
        await Task.Run ( ( ) => connect.SetMachMaking ( matchmaking ) );

    }


    //----------------------------------------------------------------------
    //Real Time Server Connection With 2nd Player---------------
    //----------------------------------------------------------------------

    private async Task ConnectToServer ( )
    {
        _connection = new HubConnectionBuilder ()
            .WithUrl ( url )
            .Build ();

        await _connection.StartAsync ();
        isConnected = true;
        connectionStatus = "Connected";

        _connection.Closed += async ( s ) =>
        {
            isConnected = false;
            connectionStatus = "Disconnected";
            await _connection.StartAsync ();
            isConnected = true;

        };
        _connection.On<int , int> ( "Rejected" , async ( receiverID , studentID ) =>
        {
            if ( receiverID == student.studentID )
            {
                selforNor = false;
                otherPlayerReject = true;
                await Task.Run ( ( ) => connect.getInfoFromId ( studentID ) );
                connectedStudent = connect.secondstudent;
                showTxt = connectedStudent.name + " is disconnected";
                await Task.Run ( ( ) => close () );

            }
        } );
        _connection.On<int , int> ( "Connected" , async ( receiverID , studentID ) =>
        {
            if ( receiverID == student.studentID )
            {
                selforNor = false;

                connectedStudentID = studentID;
                await Task.Run ( ( ) => showplayer () );
            }
        } );

    }
    public Student connectedStudent = new Student ();
    public async Task showplayer ( )
    {
        if ( connectedStudentID > 0 )
        {
            await Task.Run ( ( ) => connect.getInfoFromId ( connectedStudentID ) );
            connectedStudent = connect.secondstudent;
            modelController = "modalOpen";
            send = new Timer ();
            send.Interval = 1000;
            send.Elapsed += timecounter;
            send.Start ();
            await InvokeAsync ( ( ) =>
            {
                StateHasChanged ();
            } );
        }
    }

    public async Task close ( )
    {
        if ( otherPlayerReject == false )
        {
            await Task.Run ( ( ) => connect.sendIfReject ( connectedStudent.studentID , student.studentID ) );
        }

        on = !on;
        modelController = "modalClose";
        timer.Stop ();
        sec = 0;
        min = 0;
        play = "Play";
        await Task.Run ( ( ) => connect.DeleteIfFound ( connectedStudent.studentID ) );

        connectedStudentID = 0;
        if ( student.point > 11 && otherPlayerReject == false )
        {
            await Task.Run ( ( ) => connect.DidactPoint ( student.studentID ) );
            await Task.Run ( ( ) => connect.getInfoFromId ( student.studentID ) );
            student = connect.secondstudent;
        }

        await InvokeAsync ( ( ) =>
        {
            StateHasChanged ();
        } );

    }
    public async Task sendSecondPlayer ( )
    {

        if ( selforNor == false )
        {

            matchmaking.secondPlayerID = connectedStudentID;
            await oLocalStore.SetItemAsync ( "mmid" , matchmaking.matchID );
            await oLocalStore.SetItemAsync ( "firstPlayerID" , student.studentID );
            await oLocalStore.SetItemAsync ( "secondPlayerID" , matchmaking.secondPlayerID );
            await oLocalStore.SetItemAsync ( "q1" , matchmaking.firstQuestionID );
            await oLocalStore.SetItemAsync ( "q2" , matchmaking.secondQuestionID );
            await oLocalStore.SetItemAsync ( "q3" , matchmaking.thirdQuestionID );
            await oLocalStore.SetItemAsync ( "q4" , matchmaking.forthQuestionID );
            await oLocalStore.SetItemAsync ( "q5" , matchmaking.fifthQuestionID );
            await oLocalStore.SetItemAsync ( "myID" , student.studentID );
            await oLocalStore.SetItemAsync ( "self" , "0" );
            send.Stop ();
        }
        if ( selforNor == true )
        {

            await Task.Run ( ( ) => connect.DeleteIfFound ( connectedStudent.studentID ) );
            connectedMatch = connect.ConnectedMatch;
            connectedMatch.secondPlayerID = student.studentID;
            connectedStudentID = connectedMatch.firstPlayerID;
            await oLocalStore.SetItemAsync ( "mmid" , matchmaking.matchID );
            await oLocalStore.SetItemAsync ( "firstPlayerID" , connectedStudent.studentID );
            await oLocalStore.SetItemAsync ( "secondPlayerID" , student.studentID );
            await oLocalStore.SetItemAsync ( "q1" , matchmaking.firstQuestionID );
            await oLocalStore.SetItemAsync ( "q2" , matchmaking.secondQuestionID );
            await oLocalStore.SetItemAsync ( "q3" , matchmaking.thirdQuestionID );
            await oLocalStore.SetItemAsync ( "q4" , matchmaking.forthQuestionID );
            await oLocalStore.SetItemAsync ( "q5" , matchmaking.fifthQuestionID );
            await oLocalStore.SetItemAsync ( "self" , "1" );
            await oLocalStore.SetItemAsync ( "myID" , student.studentID );
            connect.ConnectWith2ndStudent ( connectedMatch.firstPlayerID , student.studentID );
            send.Stop ();
        }

        NavigationManager.NavigateTo ( "/quiz" );
    }

    private async void timecounter ( object sender , System.Timers.ElapsedEventArgs e )
    {
        if ( value < 0 )
        {
            send.Stop ();
            timer.Stop ();
            send.Enabled = false;
            send.Close ();
            timer.Enabled = false;
            timer.Close ();
            modelController = "modalClose";
            on = !on;
            sec = 0;
            min = 0;
            play = "Play";
            await _connection.StopAsync ();
            await InvokeAsync ( ( ) =>
            {
                StateHasChanged ();
            } );
            value = 100;
        }
        else
        {
            value = value - 5;
        }

    }


}