@page "/rader"
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.RadarChart
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using login.Data
<h4>@Name</h4>
<h5>Time = <a style="color: @Tc"><b>@TReview</b></a></h5>
<h5>Accurecy = <a style="color: @Ac"><b>@AReview</b></a></h5>
<h5>Amount = <a style="color: @Amc"><b>@AmReview</b></a></h5>

<ChartJs.Blazor.Charts.ChartJsRadarChart @ref="_radarChartJs"
                                         Config="@_config"
                                         Width="600"
                                         Height="300" />
<br />
@code {


    private List<int> phy1performance = new List<int>();
    private List<int> phy2performance = new List<int>();
    private List<int> che1performance = new List<int>();
    private List<int> che2performance = new List<int>();
    private List<int> bio1performance = new List<int>();
    private List<int> bio2performance = new List<int>();
    private string Name;
    private RadarConfig _config;
    private string TReview, AReview, AmReview;
    private string Tc, Ac, Amc;
    List<double> Info = new List<double>();

    ChartJsRadarChart _radarChartJs;

    private Random _rand = new Random();

    protected override void OnInitialized()
    {
        CalculateInfoForPaidStudent cal = new CalculateInfoForPaidStudent();
        cal.raderinfo();
        var info = CalculateInfoForPaidStudent.RaderInfo;
        Name = CalculateInfoForPaidStudent.name;
        Info = info;
        TReview = GiveReview(info[0],1);
        AReview = GiveReview(info[1],2);
        AmReview = GiveReview(info[2],3);
        _config = new RadarConfig
        {
            Options = new RadarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Participant's scores on the big-five"
                }
            }
        };

        _config.Data.Labels.AddRange(new[] { "Time", "Accuracy", "Amount" });

        _config.Data.Datasets.Add(GetNewDataset());

    }
    private RadarDataset GetNewDataset()
    {
        RadarDataset dataset = new RadarDataset
        {
            Label = $"Participant {_config.Data.Datasets.Count + 1}",
            BorderColor = ColorUtil.RandomColorString()
        };
        dataset.Data = Info;

        return dataset;
    }

    public string GiveReview(double p,int i)
    {
        string r = "";
        if(p <= 40 )
        {
            r = "Bad";
            if(i == 1)
            {
                Tc = "#ff2c2c";
            }
            if(i == 2)
            {
                Ac = "#ff2c2c";
            }
            if (i == 3)
            {
                Amc = "#ff2c2c";
            }
        }
        else if(p <= 80)
        {
            r = "Good";
            if (i == 1)
            {
                Tc = "#10f061";
            }
            if (i == 2)
            {
                Ac = "#10f061";
            }
            if (i == 3)
            {
                Amc = "#10f061";
            }
        }
        else if(p <= 100)
        {
            r = "Excelent";
            if (i == 1)
            {
                Tc = "#a010f0";
            }
            if (i == 2)
            {
                Ac = "#a010f0";
            }
            if (i == 3)
            {
                Amc = "#a010f0";
            }
        }


        return r;
    }

}

