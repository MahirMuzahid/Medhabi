@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.Util
@using login.Data
@using Newtonsoft.Json.Linq;


<ChartJs.Blazor.Charts.ChartJsLineChart @ref="_lineChartJs"
       Config="@_lineConfig"
       Width="600"
       Height="200" />
@code
{
    readonly WeatherForecastService _forecastService = new WeatherForecastService ();
    LineConfig _lineConfig;
    ChartJsLineChart _lineChartJs;
    IEnumerable<Point> point;
    List<Axis> axis = new List<Axis> ();
    private LineDataset<Point> _tempPerHourSet;
    

    List<int> accurecy;

    public class Axis
    {
        public int t { get; set; }
        public int a { get; set; }


    }

    public void setAxisForPoint ( List<int> a )
    {
        accurecy = a;

        for ( int i = 0; i < a.Count; i++ )
        {
            Axis ax = new Axis ();
            ax.t = i;
            ax.a = a [ i ];
            axis.Add ( ax );
        }
    }



    protected override async Task OnInitializedAsync ( )
    {
        List<int> a = new List<int> ();
        a.Add ( 0 );
        a.Add ( 3 );
        a.Add ( 6 );
        a.Add ( 2 );
        a.Add ( 7 );
        var accuracy = CalculateInfoForPaidStudent.accuracy;
        setAxisForPoint ( accuracy );
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true ,
                Title = new OptionsTitle
                {
                    Display = true ,
                    Text = "Right Answer"
                } ,
                Legend = new Legend
                {
                    Position = Position.Right
                } ,
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest ,
                    Intersect = false
                } ,
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Match Number (nth)"
                            },
                            GridLines = new GridLines
                            {
                                Display = true
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                SuggestedMin = 1
                            },
                            
                        }
                    } ,
                    yAxes = new List<CartesianAxis>
    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Number Of Right Answer (out of 5)"
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                SuggestedMax = 5
                            },
                            
                        }
                    }
                } ,
                Hover = new LineOptionsHover
                {
                    Intersect = true ,
                    Mode = InteractionMode.Y
                }
            }
        };

        _tempPerHourSet = new LineDataset<Point>
        {
            BackgroundColor = ColorUtil.ColorString ( 0 , 255 , 0 , 1.0 ) ,
            BorderColor = ColorUtil.ColorString ( 0 , 0 , 255 , 1.0 ) ,
            Fill = false ,
            PointBackgroundColor = ColorUtil.RandomColorString () ,
            BorderWidth = 1 ,
            PointRadius = 3 ,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };


        point = axis.Select ( p => new Point ( p.t , p.a ) );

        _tempPerHourSet.AddRange ( point );

        _lineConfig.Data.Datasets.Add ( _tempPerHourSet );
    }

    private string DegreesTickCallback ( JValue value , int index , JArray values )
    {
        return $"{value} °";
    }
}
