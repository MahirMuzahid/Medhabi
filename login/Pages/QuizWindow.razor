@page "/quiz"
@using Microsoft.AspNetCore.SignalR.Client
@using login.Data
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore
@inject NavigationManager NavigationManager
@inject ServerConnection connect


<div class="limiter">
    <div class="container-login100" style="        background: -webkit-linear-gradient(-135deg, #1e1e1e, #7340e0);
        background: -o-linear-gradient(-135deg, #1e1e1e, #7340e0);
        background: -moz-linear-gradient(-135deg, #1e1e1e, #7340e0);
        background: linear-gradient(-135deg, #1e1e1e, #7340e0);">

        <div class="wrap-login100" style="box-shadow: 7px 5px #c850c0, 10px 10px #7340e0, 15px 15px #333333;">

            <div class="container-login10-form-btn">
                <label style="padding:2px; color: @playerColor1">@firstplayer.name</label>
                <div class="circle" style="background: #d8d8d8">1</div>
                <div class="circle" style="background: #d8d8d8">2</div>
                <div class="circle" style="background: #d8d8d8">3</div>
                <div class="circle" style="background: #d8d8d8">4</div>
                <div class="circle" style="background: #d8d8d8">5</div>
            </div>
            <div class="container-login10-form-btn">
                <label style="padding:2px; color: @playerColor2">@secondplayer.name</label>
                <div class="circle" style="background: #d8d8d8">1</div>
                <div class="circle" style="background: #d8d8d8">2</div>
                <div class="circle" style="background: #d8d8d8">3</div>
                <div class="circle" style="background: #d8d8d8">4</div>
                <div class="circle" style="background: #d8d8d8">5</div>
            </div>


            <div class="container-login100-form-btn">
                <b>@waittext</b>

            </div>
            <div class="container-login100-form-btn">
                <div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="80" aria-valuemin="0" aria-valuemax="100" style="width:@value">
                    <h5 style="margin-top:40px">@value</h5>

                </div>
            </div>
            <div class="container-login100-form-btn" style="display:@display">
                <h3>পরমাণু যে ফিশনযোগ্য, কে আবিষ্কার করেন?</h3><br />
                <label class="container">

                    <input type="checkbox" @bind="@opOne">

                    <span class="checkmark"></span>
                    1. অটোহান ও স্ট্রেসম্যান
                </label>

                <label class="container">
                    ২. রজার বেকন ও বেকেরেল
                    <input type="checkbox" @bind="@opTwo">
                    <span class="checkmark"></span>
                </label>
                <label class="container">
                    3. রাইট ব্রাদারস
                    <input type="checkbox">
                    <span class="checkmark"></span>
                </label>
                <label class="container">
                    4. স্ট্রেসম্যান ও ম্যাক্সওয়েল
                    <input type="checkbox">
                    <span class="checkmark"></span>
                </label>
                <div class="container-login100-form-btn">
                    <button class="login100-form-btn" type="button" @onclick="check">
                        Next
                    </button>
                </div>
            </div>



        </div>
    </div>
</div>

@code {
    public string value { get; set; }
    public bool opOne { get; set; }
    public bool opTwo { get; set; }
    public int oqn = 0, oan = 0;
    int c = 0, self = 0,myid = 0;
    Student firstplayer = new Student();
    Student secondplayer = new Student();
    HubConnection _connection = null;
    bool isConnected = false;
    string connectionStatus = "Closed", playerColor1, playerColor2, display;
    MatchMaking mm = new MatchMaking();
    string url = "https://medhabiapi.shikkhanobish.com/QuizHub", waittext;
    protected override async Task OnInitializedAsync()
    {
        display = "none";
        value = 0 + "%";
        await ConnectToServer();
        playerColor1 = "#ADADAD";
        playerColor2 = "#ADADAD";
        self = await oLocalStore.GetItemAsync<int>("self");
        myid = await oLocalStore.GetItemAsync<int>("myID");
        mm.firstPlayerID = await oLocalStore.GetItemAsync<int>("firstPlayerID");
        mm.secondPlayerID = await oLocalStore.GetItemAsync<int>("secondPlayerID");
        await Task.Run(() => connect.getInfoFromId(mm.firstPlayerID));
        firstplayer =  connect.secondstudent;
        await Task.Run(() => connect.getInfoFromId(mm.secondPlayerID));
        secondplayer = connect.secondstudent;
        if (self == 0)
        {

            mm.matchID = await oLocalStore.GetItemAsync<string>("mmid");
            myid = await oLocalStore.GetItemAsync<int>("myID");
            mm.firstQuestionID = await oLocalStore.GetItemAsync<int>("q1");
            mm.secondQuestionID = await oLocalStore.GetItemAsync<int>("q2");
            mm.thirdQuestionID = await oLocalStore.GetItemAsync<int>("q3");
            mm.forthQuestionID = await oLocalStore.GetItemAsync<int>("q4");
            mm.fifthQuestionID = await oLocalStore.GetItemAsync<int>("q5");
            playerColor1 = "#723CCB";
            playerColor2 = "#723CCB";
            display = "block";
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
            await Task.Run(() => connect.sendmatchInfo(mm.secondPlayerID, mm.firstPlayerID, mm.matchID));

        }
        else
        {
            playerColor1 = "#ADADAD";
            playerColor2 = "#723CCB";
            waittext = "Waiting for " +firstplayer.name+ " to connect in match...";
            mm.matchID = await oLocalStore.GetItemAsync<string>("mmid");
            myid = await oLocalStore.GetItemAsync<int>("myID");
            mm.firstQuestionID = await oLocalStore.GetItemAsync<int>("q1");
            mm.secondQuestionID = await oLocalStore.GetItemAsync<int>("q2");
            mm.thirdQuestionID = await oLocalStore.GetItemAsync<int>("q3");
            mm.forthQuestionID = await oLocalStore.GetItemAsync<int>("q4");
            mm.fifthQuestionID = await oLocalStore.GetItemAsync<int>("q5");
        }

    }

    private async Task ConnectToServer()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();
        isConnected = true;
        connectionStatus = "Connected";

        _connection.Closed += async (s) =>
        {
            isConnected = false;
            connectionStatus = "Disconnected";
            await _connection.StartAsync();
            isConnected = true;

        };
        _connection.On<int, int>("Rejected", async (receiverID, studentID) =>
        {

        });

        _connection.On<int, int,string>("mc", async (receiverID, studentID, matchID) =>
        {
            if(receiverID == myid && matchID == "close")
            {
                await oLocalStore.SetItemAsync("mmid", null);
                await oLocalStore.SetItemAsync("firstPlayerID", 0);
                await oLocalStore.SetItemAsync("secondPlayerID", 0);
                await oLocalStore.SetItemAsync("q1", 0);
                await oLocalStore.SetItemAsync("q2", 0);
                await oLocalStore.SetItemAsync("q3", 0);
                await oLocalStore.SetItemAsync("q4", 0);
                await oLocalStore.SetItemAsync("q5", 0);
                await oLocalStore.SetItemAsync("self", null);
                await oLocalStore.SetItemAsync("myID", 0);
                NavigationManager.NavigateTo("/dashboard");
            }
            else if(receiverID == myid )
            {
                waittext = null;
                mm.matchID = matchID;
                playerColor1 = "#723CCB";
                display = "block";
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }


        });

    }
    public void check()
    {
        c = c + 20;
        value = c + "%";
    }







}
