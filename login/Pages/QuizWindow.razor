@page "/quiz"
@using Microsoft.AspNetCore.SignalR.Client
@using login.Data
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore
@inject NavigationManager NavigationManager
@inject ServerConnection connect
@using System.Timers


<div class="limiter">
    <div class="container-login100" style="background: -webkit-linear-gradient(-135deg, #1e1e1e, #7340e0);
        background: -o-linear-gradient(-135deg, #1e1e1e, #7340e0);
        background: -moz-linear-gradient(-135deg, #1e1e1e, #7340e0);
        background: linear-gradient(-135deg, #1e1e1e, #7340e0);">

        <div class="wrap-login100" style="box-shadow: 7px 5px #c850c0, 10px 10px #7340e0, 15px 15px #333333;">

            <div class="container-login10-form-btn">
                <label style="padding:2px; color: @playerColor1;">@firstplayer.name</label>
                <div class="circle" style=" background: @p1q1">1</div>
                <div class="circle" style=" background: @p1q2">2</div>
                <div class="circle" style=" background: @p1q3">3</div>
                <div class="circle" style=" background: @p1q4">4</div>
                <div class="circle" style=" background: @p1q5">5</div>
            </div>
            <div class="container-login10-form-btn">
                <label style="padding:2px; color: @playerColor2">@secondplayer.name</label>
                <div class="circle" style=" background: @p2q1">1</div>
                <div class="circle" style=" background: @p2q2">2</div>
                <div class="circle" style=" background: @p2q3">3</div>
                <div class="circle" style=" background: @p2q4">4</div>
                <div class="circle" style=" background: @p2q5">5</div>
            </div>


            <div class="container-login100-form-btn">
                <b style="color: @connectColor">@waittext</b><br />
                <a style="font-size: 25px; font-weight: bold">@quizTimer </a>

            </div>
            <div class="container-login100-form-btn" style="display:@display">
                <div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="80" aria-valuemin="0" aria-valuemax="100" style="width:@value">
                    <h5 style="margin-top:40px">@value</h5>

                </div>
            </div>
            <div class="container-login100-form-btn" style="display:@display">
                <h3 >@showqs</h3><br />
                <label class="container">

                    <input type="checkbox" @bind="@op1">

                    <span class="checkmark"></span>
                    @ch1
                </label>

                <label class="container">
                    @ch2
                    <input type="checkbox" @bind="@op2">
                    <span class="checkmark"></span>
                </label>
                <label class="container">
                    @ch3
                    <input type="checkbox" @bind="@op3">
                    <span class="checkmark"></span>
                </label>
                <label class="container">
                    @ch4
                    <input type="checkbox" @bind="@op4">
                    <span class="checkmark"></span>
                </label>
                <div class="container-login100-form-btn">
                    <button class="login100-form-btn" type="button" @onclick="check">
                        Next
                    </button>
                </div>
            </div>



        </div>
    </div>
</div>

@code {
    string quizTimer;
    string showqs, ch1, ch2, ch3, ch4;
    List<int> ans = new List<int>();
    public List<Question> allqs { get; set; }
    public string value { get; set; }
    public bool op1 { get; set; }
    public bool op2 { get; set; }
    public bool op3 { get; set; }
    public bool op4 { get; set; }
    public int oqn = 0, oan = 0, right;
    int c = 0, self = 0, myid = 0;
    Student firstplayer = new Student();
    Student secondplayer = new Student();
    HubConnection _connection = null;
    bool isConnected = false;
    string p1q1, p1q2, p1q3, p1q4, p1q5, p2q1, p2q2, p2q3, p2q4, p2q5;
    string connectionStatus = "Closed", playerColor1, playerColor2, display;
    MatchMaking mm = new MatchMaking();
    string url = "https://medhabiapi.shikkhanobish.com/QuizHub", waittext;
    int counter = 0;
    string rightans = "#3ACF85", connectColor;
    string wrongans = "#D84949";
    Timer timer;
    int secondplayertimer = 23;
    bool playeron;
    protected override async Task OnInitializedAsync()
    {
        connectColor = "#727272";
        p1q1 = "#D2D2D2";
        p1q2 = "#D2D2D2";
        p1q3 = "#D2D2D2";
        p1q4 = "#D2D2D2";
        p1q5 = "#D2D2D2";
        p2q1 = "#D2D2D2";
        p2q2 = "#D2D2D2";
        p2q3 = "#D2D2D2";
        p2q4 = "#D2D2D2";
        p2q5 = "#D2D2D2";
        display = "none";
        value = 0 + "%";
        await ConnectToServer();
        playerColor1 = "#ADADAD";
        playerColor2 = "#ADADAD";
        self = await oLocalStore.GetItemAsync<int>("self");
        myid = await oLocalStore.GetItemAsync<int>("myID");
        mm.firstPlayerID = await oLocalStore.GetItemAsync<int>("firstPlayerID");
        mm.secondPlayerID = await oLocalStore.GetItemAsync<int>("secondPlayerID");
        await Task.Run(() => connect.getInfoFromId(mm.firstPlayerID));
        firstplayer = connect.secondstudent;
        await Task.Run(() => connect.getInfoFromId(mm.secondPlayerID));
        secondplayer = connect.secondstudent;
        mm.firstQuestionID = await oLocalStore.GetItemAsync<int>("q1");
        mm.secondQuestionID = await oLocalStore.GetItemAsync<int>("q2");
        mm.thirdQuestionID = await oLocalStore.GetItemAsync<int>("q3");
        mm.forthQuestionID = await oLocalStore.GetItemAsync<int>("q4");
        mm.fifthQuestionID = await oLocalStore.GetItemAsync<int>("q5");
        mm.matchID = await oLocalStore.GetItemAsync<string>("mmid");
        QuestionMaker qm = new QuestionMaker();
        qm.firstqsID = mm.firstQuestionID;
        qm.secondID = mm.secondQuestionID;
        qm.thirdID = mm.thirdQuestionID;
        qm.forthID = mm.forthQuestionID;
        qm.fifthID = mm.fifthQuestionID;
        await Task.Run(() => GetQuestiob(qm));
        allqs =  connect.allqs;
        if (self == 0)
        {
            playerColor1 = "#3498DB";
            playerColor2 = "#723CCB";
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });

            display = "block";
            connect.sendmatchInfo(mm.secondPlayerID, mm.firstPlayerID, mm.matchID);
            await Task.Run(() => showquestioninWindow(allqs[0].question, allqs[0].first_choice, allqs[0].second_choice, allqs[0].third_choice, allqs[0].forth_choice, allqs[0].right_answer));
            timer = new Timer();
            timer.Interval = 1000;
            timer.Elapsed += startquiztimer;
            timer.Start();

        }
        else
        {
            playerColor1 = "#ADADAD";
            playerColor2 = "#723CCB";

            timer = new Timer();
            timer.Interval = 1000;
            timer.Elapsed += waitfor2ndplayer;
            timer.Start();
        }

    }

    private async void waitfor2ndplayer(object sender, ElapsedEventArgs e)
    {
        secondplayertimer = secondplayertimer - 1;
        if(secondplayertimer < 4 && playeron == false)
        {
            connectColor = "#E32F2F";
            waittext =firstplayer.name + " could not connect in match ";

        }
        else if(playeron == false)
        {
            waittext = "Waiting for " + firstplayer.name + " to connect in match in " + (secondplayertimer - 3);
        }
        else if (playeron == true)
        {
            waittext = null ;
        }
        if (secondplayertimer == 0 && playeron == false)
        {
            await oLocalStore.SetItemAsync("mmid", null);
            await oLocalStore.SetItemAsync("firstPlayerID", 0);
            await oLocalStore.SetItemAsync("secondPlayerID", 0);
            await oLocalStore.SetItemAsync("q1", 0);
            await oLocalStore.SetItemAsync("q2", 0);
            await oLocalStore.SetItemAsync("q3", 0);
            await oLocalStore.SetItemAsync("q4", 0);
            await oLocalStore.SetItemAsync("q5", 0);
            await oLocalStore.SetItemAsync("self", null);
            await oLocalStore.SetItemAsync("myID", 0);
            timer.Stop();
            NavigationManager.NavigateTo("/dashboard");
        }

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    public async Task GetQuestiob(QuestionMaker qm)
    {
        await Task.Run(() => connect.MakeQuestion(qm));
        allqs = connect.allqs;
    }

    public async Task showquestioninWindow(string qs, string c1, string c2, string c3, string c4, int r)
    {
        showqs = qs;
        ch1 = c1;
        ch2 = c2;
        ch3 = c3;
        ch4 = c4;
        right = r;
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async Task ConnectToServer()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();
        isConnected = true;
        connectionStatus = "Connected";

        _connection.Closed += async (s) =>
        {
            isConnected = false;
            connectionStatus = "Disconnected";
            await _connection.StartAsync();
            isConnected = true;

        };
        _connection.On<int, int>("Rejected", async (receiverID, studentID) =>
        {

        });

        _connection.On<int, int, string>("mcr", async (receiverID, studentID, matchID) =>
        {
            if (receiverID == myid)
            {
                playeron = true;
                waittext = null;
                mm.matchID = matchID;
                playerColor1 = "#3498DB";
                display = "block";
                await Task.Run(() => showquestioninWindow(allqs[0].question, allqs[0].first_choice, allqs[0].second_choice, allqs[0].third_choice, allqs[0].forth_choice, allqs[0].right_answer));
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });

                timer = new Timer();
                timer.Interval = 1000;
                timer.Elapsed += startquiztimer;
                timer.Start();

            }
        });

    }
    int qtimer = 0,qmin;
    private async void startquiztimer(object sender, ElapsedEventArgs e)
    {
        qtimer = qtimer + 1;
        if(qtimer == 60)
        {
            qmin = qmin + 1;
            qtimer = 0;
        }
        if(qtimer < 10)
        {
            if(qmin < 10)
            {
                quizTimer = "0"+ qmin + ":" + "0" + qtimer;
            }
            else
            {
                quizTimer = qmin + ":" + "0" + qtimer;
            }

        }
        else
        {
            if(qmin < 10)
            {
                quizTimer = "0" + qmin + ":" + qtimer;
            }
            else
            {
                quizTimer = qmin + ":" + qtimer;
            }

        }
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });

    }

    public async void check()
    {
        if(counter < 5)
        {
            checkWrightWrong();
            c = c + 20;
            value = c + "%";
            op1 = false;
            op2 = false;
            op3 = false;
            op4 = false;
            await Task.Run(() => showquestioninWindow(allqs[counter].question, allqs[counter].first_choice, allqs[counter].second_choice, allqs[counter].third_choice, allqs[counter].forth_choice, allqs[counter].right_answer));
            counter++;
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }

    }




    public void checkWrightWrong()
    {
        int givnans = 0;
        if (op1 == true)
        {
            givnans = 1;
        }
        else if (op2 == true)
        {
            givnans = 2;
        }
        else if (op3 == true)
        {
            givnans = 3;
        }
        else if (op4 == true)
        {
            givnans = 4;
        }
        if (counter == 0)
        {
            if (allqs[counter].right_answer == givnans)
            {
                p1q1 = rightans;
            }
            else
            {
                p1q1 = wrongans;
            }
        }
        else if (counter == 1)
        {
            if (allqs[counter].right_answer == givnans)
            {
                p1q2 = rightans;
            }
            else
            {
                p1q2 = wrongans;
            }
        }
        else if (counter == 2)
        {
            if (allqs[counter].right_answer == givnans)
            {
                p1q3 = rightans;
            }
            else
            {
                p1q3 = wrongans;
            }
        }
        else if (counter == 3)
        {
            if (allqs[counter].right_answer == givnans)
            {
                p1q4 = rightans;
            }
            else
            {
                p1q4 = wrongans;
            }
        }
        else if (counter == 4)
        {
            if (allqs[counter].right_answer == givnans)
            {
                p1q5 = rightans;
            }
            else
            {
                p1q5 = wrongans;
            }
        }

    }





}
