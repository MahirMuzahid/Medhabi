@page "/quiz"
@using Microsoft.AspNetCore.SignalR.Client
@using login.Data
@inject Blazored.LocalStorage.ILocalStorageService oLocalStore
@inject NavigationManager NavigationManager
@inject ServerConnection connect
@using System.Timers

<div class="limiter">
    <div class="container-login100" style="background: -webkit-linear-gradient(-135deg, #1e1e1e, #7340e0);
        background: -o-linear-gradient(-135deg, #1e1e1e, #7340e0);
        background: -moz-linear-gradient(-135deg, #1e1e1e, #7340e0);
        background: linear-gradient(-135deg, #1e1e1e, #7340e0);">

        <div class="wrap-login100" style="box-shadow: 7px 5px #c850c0, 10px 10px #7340e0, 15px 15px #333333;">

            <div class="container-login10-form-btn">
                <label style="padding:2px; color: @playerColor1;">@firstplayer.name</label>
                <div class="circle" style=" background: @p1q1">1</div>
                <div class="circle" style=" background: @p1q2">2</div>
                <div class="circle" style=" background: @p1q3">3</div>
                <div class="circle" style=" background: @p1q4">4</div>
                <div class="circle" style=" background: @p1q5">5</div>
            </div>
            <div class="container-login10-form-btn">
                <label style="padding:2px; color: @playerColor2">@secondplayer.name</label>
                <div class="circle" style=" background: @p2q1">1</div>
                <div class="circle" style=" background: @p2q2">2</div>
                <div class="circle" style=" background: @p2q3">3</div>
                <div class="circle" style=" background: @p2q4">4</div>
                <div class="circle" style=" background: @p2q5">5</div>
            </div>

            <div class="container-login100-form-btn">
                <b style="color: @connectColor; font-size: @fontSize px ">@waittext</b><br/>
                <a class="myButton" @onclick="go" style="display:@displaybtn" >Go To Dashboard</a>
                <br />
                <a style="font-size: 25px; font-weight: bold; display:@display">@quizTimer </a>
            </div>
            <div class="container-login100-form-btn" style="display:@display">
                <div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="80" aria-valuemin="0" aria-valuemax="100" style="width:@value">
                    <h5 style="margin-top: 40px">@value</h5>
                </div>
            </div>
            <div class="container-login100-form-btn" style="display:@display">
                <h3>@showqs</h3>
                <br />
                <label class="container">

                    <input type="checkbox" @bind="@op1">

                    <span class="checkmark"></span>
                    @ch1
                </label>

                <label class="container">
                    @ch2
                    <input type="checkbox" @bind="@op2">
                    <span class="checkmark"></span>
                </label>
                <label class="container">
                    @ch3
                    <input type="checkbox" @bind="@op3">
                    <span class="checkmark"></span>
                </label>
                <label class="container">
                    @ch4
                    <input type="checkbox" @bind="@op4">
                    <span class="checkmark"></span>
                </label>
                <div class="container-login100-form-btn">
                    <button class="login100-form-btn" type="button" @onclick="check">
                        Next
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    //
    //ALl Veriable----------------------------------------------------------------------------------------------------------------------
    //
    string quizTimer;
    string showqs, ch1, ch2, ch3, ch4;
    List<int> ans = new List<int> ();
    public List<Question> allqs { get; set; }
    public string value { get; set; }
    public bool op1 { get; set; }
    public bool op2 { get; set; }
    public bool op3 { get; set; }
    public bool op4 { get; set; }
    public int oqn = 0, oan = 0, right;
    int c = 0, self = 0, myid = 0, fontSize;
    Student firstplayer = new Student ();
    Student secondplayer = new Student ();
    HubConnection _connection = null;
    bool isConnected = false;
    string p1q1, p1q2, p1q3, p1q4, p1q5, p2q1, p2q2, p2q3, p2q4, p2q5;
    string connectionStatus = "Closed", playerColor1, playerColor2, display, displaybtn;
    MatchMaking mm = new MatchMaking ();
    string url = "https://medhabiapi.shikkhanobish.com/QuizHub", waittext;
    int counter = 0;
    string rightans = "#3ACF85", connectColor;
    string wrongans = "#D84949";
    Timer timer;
    int secondplayertimer = 23;
    bool playeron;
    int otherplayerID;
    bool meFirstPlayer;
    int myTime, otherTime;
    string otherPlayerName, myName;
    int myPoint;
    int qtimer = 0, qmin;
    int givnans = 0;
    int meRight, otherRight;
    PlayerHistory ph = new PlayerHistory ();
    MatchHistory mh = new MatchHistory ();
    bool medone, otherDone;
    List<string> qsCode = new List<string>();
    //
    //ALl Veriable End----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Inital M3thod----------------------------------------------------------------------------------------------------------------------
    //
    protected override async Task OnInitializedAsync ( )
    {

        if ( await oLocalStore.GetItemAsync<int> ( "firstPlayerID" ) == 0 )
        {
            NavigationManager.NavigateTo ( "/dashboard" );
        }
        else
        {
            medone = false;
            otherDone = false;
            connectColor = "#727272";
            p1q1 = "#D2D2D2";
            p1q2 = "#D2D2D2";
            p1q3 = "#D2D2D2";
            p1q4 = "#D2D2D2";
            p1q5 = "#D2D2D2";
            p2q1 = "#D2D2D2";
            p2q2 = "#D2D2D2";
            p2q3 = "#D2D2D2";
            p2q4 = "#D2D2D2";
            p2q5 = "#D2D2D2";
            display = "none";
            value = 0 + "%";
            fontSize = 12;
            displaybtn = "none";
            await ConnectToServer ();
            playerColor1 = "#ADADAD";
            playerColor2 = "#ADADAD";
            self = await oLocalStore.GetItemAsync<int> ( "self" );
            myid = await oLocalStore.GetItemAsync<int> ( "myID" );
            mm.firstPlayerID = await oLocalStore.GetItemAsync<int> ( "firstPlayerID" );
            mm.secondPlayerID = await oLocalStore.GetItemAsync<int> ( "secondPlayerID" );
            await Task.Run ( ( ) => connect.getInfoFromId ( mm.firstPlayerID ) );
            firstplayer = connect.secondstudent;
            await Task.Run ( ( ) => connect.getInfoFromId ( mm.secondPlayerID ) );
            secondplayer = connect.secondstudent;
            mm.firstQuestionID = await oLocalStore.GetItemAsync<int> ( "q1" );
            mm.secondQuestionID = await oLocalStore.GetItemAsync<int> ( "q2" );
            mm.thirdQuestionID = await oLocalStore.GetItemAsync<int> ( "q3" );
            mm.forthQuestionID = await oLocalStore.GetItemAsync<int> ( "q4" );
            mm.fifthQuestionID = await oLocalStore.GetItemAsync<int> ( "q5" );
            mm.matchID = await oLocalStore.GetItemAsync<string> ( "mmid" );
            var a = await oLocalStore.GetItemAsync<string> ( "qcode1" );
            qsCode.Add ( a);
            a = await oLocalStore.GetItemAsync<string> ( "qcode2" );
            qsCode.Add ( a );
            a = await oLocalStore.GetItemAsync<string> ( "qcode3" );
            qsCode.Add ( a );
            a = await oLocalStore.GetItemAsync<string> ( "qcode4" );
            qsCode.Add ( a );
            a = await oLocalStore.GetItemAsync<string> ( "qcode5" );
            qsCode.Add ( a );
            QuestionMaker qm = new QuestionMaker ();
            qm.firstqsID = mm.firstQuestionID;
            qm.secondID = mm.secondQuestionID;
            qm.thirdID = mm.thirdQuestionID;
            qm.forthID = mm.forthQuestionID;
            qm.fifthID = mm.fifthQuestionID;
            await Task.Run ( ( ) => GetQuestiob ( qm ) );
            ph.matchID = mm.matchID;
            mh.matchID = mm.matchID;
            if ( self == 0 )
            {
                myPoint = firstplayer.point;
                meFirstPlayer = true;
                playerColor1 = "#3498DB";
                playerColor2 = "#723CCB";
                await InvokeAsync ( ( ) =>
                {
                    StateHasChanged ();
                } );

                display = "block";
                connect.sendmatchInfo ( mm.secondPlayerID , mm.firstPlayerID , mm.matchID );
                otherplayerID = mm.secondPlayerID;
                otherPlayerName = secondplayer.name;
                myName = firstplayer.name;
                await Task.Run ( ( ) => showquestioninWindow ( allqs [ 0 ].question , allqs [ 0 ].first_choice , allqs [ 0 ].second_choice , allqs [ 0 ].third_choice , allqs [ 0 ].forth_choice , allqs [ 0 ].right_answer ) );
                timer = new Timer ();
                timer.Interval = 1000;
                timer.Elapsed += startquiztimer;
                timer.Start ();

            }
            else
            {
                myPoint = secondplayer.point;
                meFirstPlayer = false;
                otherPlayerName = firstplayer.name;
                myName = secondplayer.name;
                playerColor1 = "#ADADAD";
                playerColor2 = "#723CCB";
                otherplayerID = mm.firstPlayerID;
                timer = new Timer ();
                timer.Interval = 1000;
                timer.Elapsed += waitfor2ndplayer;
                timer.Start ();
            }
        }

    }
    //
    //Inital Method End----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Wait For Second Player Timer Start----------------------------------------------------------------------------------------------------------------------
    //

    private async void waitfor2ndplayer ( object sender , ElapsedEventArgs e )
    {
        secondplayertimer = secondplayertimer - 1;
        if ( secondplayertimer < 4 && playeron == false )
        {
            connectColor = "#E32F2F";
            waittext = firstplayer.name + " could not connect in match ";

        }
        else if ( playeron == false )
        {
            waittext = "Waiting for " + firstplayer.name + " to connect in match in " + ( secondplayertimer - 3 );
        }
        else if ( playeron == true )
        {
            waittext = null;
        }
        if ( secondplayertimer == 0 && playeron == false )
        {
            await oLocalStore.ClearAsync ();
            await Task.Run ( ( ) => connect.getInfoFromId ( myid ) );
            await oLocalStore.SetItemAsync ( "mail" , connect.secondstudent.mail );
            await oLocalStore.SetItemAsync ( "password" , connect.secondstudent.password );
            timer.Stop ();
            NavigationManager.NavigateTo ( "/dashboard" );
        }

        await InvokeAsync ( ( ) =>
        {
            StateHasChanged ();
        } );
    }
    //
    //Wait For Second Player Timer End----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Get All Question From Server----------------------------------------------------------------------------------------------------------------------
    //
    public async Task GetQuestiob ( QuestionMaker qm )
    {
        await Task.Run ( ( ) => connect.MakeQuestion ( qm ) );
        allqs = connect.allqs;
    }
    //
    //Get All Question From Server End----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Show Question on Window----------------------------------------------------------------------------------------------------------------------
    //
    public async Task showquestioninWindow ( string qs , string c1 , string c2 , string c3 , string c4 , int r )
    {
        showqs = qs;
        ch1 = c1;
        ch2 = c2;
        ch3 = c3;
        ch4 = c4;
        right = r;
        await InvokeAsync ( ( ) =>
        {
            StateHasChanged ();
        } );
    }
    //
    //Show Question on Window End----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Quiz Timer----------------------------------------------------------------------------------------------------------------------
    //
    private async void startquiztimer ( object sender , ElapsedEventArgs e )
    {
        qtimer = qtimer + 1;
        if ( qtimer == 60 )
        {
            qmin = qmin + 1;
            qtimer = 0;
        }
        if ( qtimer < 10 )
        {
            if ( qmin < 10 )
            {
                quizTimer = "0" + qmin + ":" + "0" + qtimer;
            }
            else
            {
                quizTimer = qmin + ":" + "0" + qtimer;
            }

        }
        else
        {
            if ( qmin < 10 )
            {
                quizTimer = "0" + qmin + ":" + qtimer;
            }
            else
            {
                quizTimer = qmin + ":" + qtimer;
            }

        }
        await InvokeAsync ( ( ) =>
        {
            StateHasChanged ();
        } );

    }
    //
    //Quiz Timer End----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Check Button Click----------------------------------------------------------------------------------------------------------------------
    //
    public async void check ( )
    {
        if ( counter < 5 )
        {
            checkWrightWrong ();
            connect.passans ( otherplayerID , counter , givnans );
            placewriteorwrong ( counter , givnans , 0 );

            c = c + 20;
            value = c + "%";
            op1 = false;
            op2 = false;
            op3 = false;
            op4 = false;
            counter++;
            if ( counter < 5 )
            {
                await Task.Run ( ( ) => showquestioninWindow ( allqs [ counter ].question , allqs [ counter ].first_choice , allqs [ counter ].second_choice , allqs [ counter ].third_choice , allqs [ counter ].forth_choice , allqs [ counter ].right_answer ) );
            }
            await InvokeAsync ( ( ) =>
            {
                StateHasChanged ();
            } );
        }

    }
    //
    //Check Button Click end----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Check Write or Wrogn Answer----------------------------------------------------------------------------------------------------------------------
    //
    public void checkWrightWrong ( )
    {

        if ( op1 == true )
        {
            givnans = 1;
        }
        else if ( op2 == true )
        {
            givnans = 2;
        }
        else if ( op3 == true )
        {
            givnans = 3;
        }
        else if ( op4 == true )
        {
            givnans = 4;
        }

    }
    //
    //Check Write or Wrogn Answer end----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Place write or wrong in veriable for server----------------------------------------------------------------------------------------------------------------------
    //
    public void placewriteorwrong ( int qn , int qa , int fromwhere )
    {
        int go = 0;
        myTime = qmin * 60 + qtimer;
        if ( meFirstPlayer == true && fromwhere == 0 )
        {
            go = 0;
        }
        else if ( meFirstPlayer == true && fromwhere == 1 )
        {
            go = 1;
        }
        else if ( meFirstPlayer == false && fromwhere == 0 )
        {
            go = 1;
        }
        else if ( meFirstPlayer == false && fromwhere == 1 )
        {
            go = 0;
        }
        if ( go == 0 )
        {
            if ( qn == 0 )

            {
                if ( allqs [ qn ].right_answer == qa )
                {
                    p1q1 = rightans;

                }
                else
                {
                    p1q1 = wrongans;
                }
            }
            else if ( qn == 1 )
            {
                if ( allqs [ qn ].right_answer == qa )
                {
                    p1q2 = rightans;
                }
                else
                {
                    p1q2 = wrongans;
                }
            }
            else if ( qn == 2 )
            {
                if ( allqs [ qn ].right_answer == qa )
                {
                    p1q3 = rightans;
                }
                else
                {
                    p1q3 = wrongans;
                }
            }
            else if ( qn == 3 )
            {
                if ( allqs [ qn ].right_answer == qa )
                {
                    p1q4 = rightans;
                }
                else
                {
                    p1q4 = wrongans;
                }
            }
            else if ( qn == 4 )
            {
                if ( allqs [ qn ].right_answer == qa )
                {
                    p1q5 = rightans;
                }
                else
                {
                    p1q5 = wrongans;
                }
            }
        }
        else if ( go == 1 )
        {
            if ( qn == 0 )
            {
                if ( allqs [ qn ].right_answer == qa )
                {
                    p2q1 = rightans;
                }
                else
                {
                    p2q1 = wrongans;
                }
            }
            else if ( qn == 1 )
            {
                if ( allqs [ qn ].right_answer == qa )
                {
                    p2q2 = rightans;
                }
                else
                {
                    p2q2 = wrongans;
                }
            }
            else if ( qn == 2 )
            {
                if ( allqs [ qn ].right_answer == qa )
                {
                    p2q3 = rightans;
                }
                else
                {
                    p2q3 = wrongans;
                }
            }
            else if ( qn == 3 )
            {
                if ( allqs [ qn ].right_answer == qa )
                {
                    p2q4 = rightans;
                }
                else
                {
                    p2q4 = wrongans;
                }
            }
            else if ( qn == 4 )
            {
                if ( allqs [ qn ].right_answer == qa )
                {
                    p2q5 = rightans;
                }
                else
                {
                    p2q5 = wrongans;
                }
            }
        }

        if ( fromwhere == 0 )
        {
            if ( allqs [ qn ].right_answer == qa )
            {
                meRight++;
                if ( qn == 0 )
                {
                    ph.q1 = "1" + qsCode [ 0 ];
                }
                if ( qn == 1 )
                {
                    ph.q2 = "1" + qsCode [ 1 ];
                }
                if ( qn == 2 )
                {
                    ph.q3 = "1" + qsCode [ 2 ];
                }
                if ( qn == 3 )
                {
                    ph.q4 = "1" + qsCode [ 3 ];
                }
                if ( qn == 4 )
                {
                    ph.q5 = "1" + qsCode [ 4 ];
                }
            }
            else
            {
                if ( qn == 0 )
                {
                    ph.q1 = "0" + qsCode [ 0 ];
                }
                if ( qn == 1 )
                {
                    ph.q2 = "0" + qsCode [ 1 ];
                }
                if ( qn == 2 )
                {
                    ph.q3 = "0" + qsCode [ 2 ];
                }
                if ( qn == 3 )
                {
                    ph.q4 = "0" + qsCode [ 3 ];
                }
                if ( qn == 4 )
                {
                    ph.q5 = "0" + qsCode [ 4 ];
                }
            }

        }
        if ( qn == 4 && fromwhere == 0 )
        {
            display = "none";
            myTime = qmin * 60 + qtimer;
            connect.senddone ( otherplayerID , myid , meRight , myTime );
            callALLDone ( 0 );


        }

    }
    //
    //Place write or wrong in veriable for server end----------------------------------------------------------------------------------------------------------------------
    //

    //
    //See 2 players are done or not----------------------------------------------------------------------------------------------------------------------
    //
    public async void callALLDone ( int call )
    {
        if ( call == 0 )
        {
            medone = true;
            if( otherDone == false)
            {
                waittext = "Wait for other player to end the match";
            }

        }
        if ( call == 1 )
        {
            otherDone = true;
        }
        if ( medone == true && otherDone == true )
        {
            await decideWinner ();
        }
        await InvokeAsync ( ( ) =>
        {
            StateHasChanged ();
        } );

    }
    //
    //See 2 players are done or not end----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Decide Winner----------------------------------------------------------------------------------------------------------------------
    //
    public async Task decideWinner ( )
    {
        displaybtn = "block";
        if ( meRight > otherRight )
        {
            await winnerSave ();
        }
        else if ( meRight < otherRight )
        {
            await loserSave ();
        }
        else if ( meRight == otherRight )
        {
            if ( myTime < otherTime )
            {
                await winnerSave ();
            }
            else if ( myTime > otherTime )
            {
                await loserSave ();
            }
            else if ( myTime == otherTime )
            {
                Random r = new Random ();
                if ( ( r.Next ( 0 , 10 ) ) % 2 == 0 )
                {
                    await winnerSave ();
                }
                else
                {
                    await loserSave ();
                }
            }
        }
    }
    //
    //Decide Winner end----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Save Winner Result----------------------------------------------------------------------------------------------------------------------
    //
    public async Task winnerSave ( )
    {
        mh.winnerPlayerID = myid;
        mh.looserPlayerID = otherplayerID;
        mh.q1 = mm.firstQuestionID;
        mh.q2 = mm.secondQuestionID;
        mh.q3 = mm.thirdQuestionID;
        mh.q4 = mm.forthQuestionID;
        mh.q5 = mm.fifthQuestionID;
        mh.whatToDO = 0;

        ph.matchStatus = "Win";
        ph.whatToDO = 0;
        ph.playerID = myid;
        medone = false;
        otherDone = false;

        await Task.Run ( ( ) => connect.EditMatchHistory ( mh ) );
        await Task.Run ( ( ) => connect.EditPlayerHistory ( ph ) );
        updateInfo ();
        await Task.Run ( ( ) => connect.getInfoFromId ( myid ) );

        fontSize = 20;
        connectColor = "green";
        waittext = "You Won!!!";
        await InvokeAsync ( ( ) =>
        {
            StateHasChanged ();
        } );

    }
    //
    //Save Winner Result end----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Save Loser Result----------------------------------------------------------------------------------------------------------------------
    //
    public async Task loserSave ( )
    {
        mh.looserPlayerID = myid;

        mh.looserPlayerID = myid;
        mh.q1 = mm.firstQuestionID;
        mh.q2 = mm.secondQuestionID;
        mh.q3 = mm.thirdQuestionID;
        mh.q4 = mm.forthQuestionID;
        mh.q5 = mm.fifthQuestionID;
        mh.whatToDO = 0;

        ph.matchStatus = "Lose";
        ph.whatToDO = 0;
        ph.playerID = myid;
        await Task.Run ( ( ) => connect.EditPlayerHistory ( ph ) );
        updateInfo ();
        medone = false;
        otherDone = false;
        await Task.Run ( ( ) => connect.getInfoFromId ( myid ) );
        await oLocalStore.SetItemAsync ( "mail" , connect.secondstudent.mail );
        await oLocalStore.SetItemAsync ( "password" , connect.secondstudent.password );

        fontSize = 20;
        connectColor = "red";
        waittext = "You Lose!!!";
        await InvokeAsync ( ( ) =>
        {
            StateHasChanged ();
        } );
    }
    //
    //Save Loser Result end----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Update Info in server----------------------------------------------------------------------------------------------------------------------
    //
    public async void updateInfo ( )
    {
        int totalPoint; ;
        string rank = "null";

        if ( meRight == 5 )
        {
            totalPoint = meRight + 5 + myPoint;
        }
        else
        {
            totalPoint = meRight + myPoint;
        }

        if ( totalPoint > 0 && totalPoint <= 99 )
        {
            rank = "BEGINNER";
        }
        else if ( totalPoint >= 100 && totalPoint <= 299 )
        {
            rank = "PASSIONATE";
        }
        else if ( totalPoint >= 300 && totalPoint <= 599 )
        {
            rank = "SKILLED";
        }
        else if ( totalPoint >= 600 && totalPoint <= 1099 )
        {
            rank = "ASSIDUOUS";
        }
        else if ( totalPoint >= 1100 && totalPoint <= 1899 )
        {
            rank = "LEGEND";
        }
        else if ( totalPoint >= 1900 )
        {
            rank = "THE PRODIGY";
        }

        Student s = new Student ();
        s.studentID = myid;
        s.total_right_answer = meRight;
        s.total_question_answered = 5;
        s.point = totalPoint;
        s.rank = rank;
        await Task.Run ( ( ) => connect.UpdateInfo ( s ) );
    }
    //
    //Update Info in server end----------------------------------------------------------------------------------------------------------------------
    //

    //
    //Connect With Real Time Api server----------------------------------------------------------------------------------------------------------------------
    //
    private async Task ConnectToServer ( )
    {
        _connection = new HubConnectionBuilder ()
            .WithUrl ( url )
            .Build ();

        await _connection.StartAsync ();
        isConnected = true;
        connectionStatus = "Connected";

        _connection.Closed += async ( s ) =>
        {
            isConnected = false;
            connectionStatus = "Disconnected";
            await _connection.StartAsync ();
            isConnected = true;

        };
        _connection.On<int , int , int> ( "QuizInfo" , ( receiverID , qn , qa ) =>
        {
            if ( receiverID == myid )
            {
                placewriteorwrong ( qn , qa , 1 );
            }
        } );
        _connection.On<int , int , int , int> ( "donemsg" , async ( receiverID , studentID , ra , time ) =>
        {
            if ( receiverID == myid )
            {
                otherTime = time;
                otherRight = ra;
                callALLDone ( 1 );

            }
        } );

        _connection.On<int , int , string> ( "mcr" , async ( receiverID , studentID , matchID ) =>
        {
            if ( receiverID == myid )
            {
                otherplayerID = studentID;
                playeron = true;
                waittext = null;
                mm.matchID = matchID;
                playerColor1 = "#3498DB";
                display = "block";
                await Task.Run ( ( ) => showquestioninWindow ( allqs [ 0 ].question , allqs [ 0 ].first_choice , allqs [ 0 ].second_choice , allqs [ 0 ].third_choice , allqs [ 0 ].forth_choice , allqs [ 0 ].right_answer ) );
                await InvokeAsync ( ( ) =>
                {
                    StateHasChanged ();
                } );

                timer = new Timer ();
                timer.Interval = 1000;
                timer.Elapsed += startquiztimer;
                timer.Start ();

            }
        } );

    }
    //
    //Connect With Real Time Api server end----------------------------------------------------------------------------------------------------------------------
    //

    public void go ( )
    {
        NavigationManager.NavigateTo ( "/dashboard" );
    }
}